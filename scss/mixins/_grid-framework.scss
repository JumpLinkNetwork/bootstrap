// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width) {

  // Common properties for all breakpoints
  %grid-column {
    position: relative;
    // Prevent columns from collapsing when empty
    min-height: 1px;
    // Inner gutter via padding
    padding-right: ($gutter / 2);
    padding-left: ($gutter / 2);

    @if $enable-flex {
      width: 100%;
    }
  }

  $breakpoint-counter: 0;

  // xs
  $breakpoint: xs;
  $breakpoint-counter: ($breakpoint-counter + 1);

  @for $i from 1 through $columns {
    .col-#{$breakpoint}-#{$i} {
      @extend %grid-column;
    }
  }

  @include media-breakpoint-up(xs, $grid-breakpoints-xs, $grid-breakpoints-sm, $grid-breakpoints-md, $grid-breakpoints-lg, $grid-breakpoints-xl) {
    // Provide basic `.col-{bp}` classes for equal-width flexbox columns
    @if $enable-flex {
      .col-#{$breakpoint} {
        position: relative;
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
        min-height: 1px;
        padding-right: ($grid-gutter-width / 2);
        padding-left:  ($grid-gutter-width / 2);
      }
    }

    @for $i from 1 through $columns {
      .col-#{$breakpoint}-#{$i} {
        @include make-col($i, $columns, $gutter);
      }
    }

    @each $modifier in (pull, push) {
      @for $i from 0 through $columns {
        .#{$modifier}-#{$breakpoint}-#{$i} {
          @include make-col-modifier($modifier, $i, $columns)
        }
      }
    }

    // `$columns - 1` because offsetting by the width of an entire row isn't possible
    @for $i from 0 through ($columns - 1) {
      @if $breakpoint-counter != 1 or $i != 0 { // Avoid emitting useless .offset-xs-0
        .offset-#{$breakpoint}-#{$i} {
          @include make-col-modifier(offset, $i, $columns)
        }
      }
    }
  }

  // sm
  $breakpoint: sm;
  $breakpoint-counter: ($breakpoint-counter + 1);

  @for $i from 1 through $columns {
    .col-#{$breakpoint}-#{$i} {
      @extend %grid-column;
    }
  }

  @include media-breakpoint-up(sm, $grid-breakpoints-xs, $grid-breakpoints-sm, $grid-breakpoints-md, $grid-breakpoints-lg, $grid-breakpoints-xl) {
    // Provide basic `.col-{bp}` classes for equal-width flexbox columns
    @if $enable-flex {
      .col-#{$breakpoint} {
        position: relative;
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
        min-height: 1px;
        padding-right: ($grid-gutter-width / 2);
        padding-left:  ($grid-gutter-width / 2);
      }
    }

    @for $i from 1 through $columns {
      .col-#{$breakpoint}-#{$i} {
        @include make-col($i, $columns, $gutter);
      }
    }

    @each $modifier in (pull, push) {
      @for $i from 0 through $columns {
        .#{$modifier}-#{$breakpoint}-#{$i} {
          @include make-col-modifier($modifier, $i, $columns)
        }
      }
    }

    // `$columns - 1` because offsetting by the width of an entire row isn't possible
    @for $i from 0 through ($columns - 1) {
      @if $breakpoint-counter != 1 or $i != 0 { // Avoid emitting useless .offset-xs-0
        .offset-#{$breakpoint}-#{$i} {
          @include make-col-modifier(offset, $i, $columns)
        }
      }
    }
  }

  // md
  $breakpoint: md;
  $breakpoint-counter: ($breakpoint-counter + 1);

  @for $i from 1 through $columns {
    .col-#{$breakpoint}-#{$i} {
      @extend %grid-column;
    }
  }

  @include media-breakpoint-up(md, $grid-breakpoints-xs, $grid-breakpoints-sm, $grid-breakpoints-md, $grid-breakpoints-lg, $grid-breakpoints-xl) {
    // Provide basic `.col-{bp}` classes for equal-width flexbox columns
    @if $enable-flex {
      .col-#{$breakpoint} {
        position: relative;
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
        min-height: 1px;
        padding-right: ($grid-gutter-width / 2);
        padding-left:  ($grid-gutter-width / 2);
      }
    }

    @for $i from 1 through $columns {
      .col-#{$breakpoint}-#{$i} {
        @include make-col($i, $columns, $gutter);
      }
    }

    @each $modifier in (pull, push) {
      @for $i from 0 through $columns {
        .#{$modifier}-#{$breakpoint}-#{$i} {
          @include make-col-modifier($modifier, $i, $columns)
        }
      }
    }

    // `$columns - 1` because offsetting by the width of an entire row isn't possible
    @for $i from 0 through ($columns - 1) {
      @if $breakpoint-counter != 1 or $i != 0 { // Avoid emitting useless .offset-xs-0
        .offset-#{$breakpoint}-#{$i} {
          @include make-col-modifier(offset, $i, $columns)
        }
      }
    }
  }

  // lg
  $breakpoint: lg;
  $breakpoint-counter: ($breakpoint-counter + 1);

  @for $i from 1 through $columns {
    .col-#{$breakpoint}-#{$i} {
      @extend %grid-column;
    }
  }

  @include media-breakpoint-up(lg, $grid-breakpoints-xs, $grid-breakpoints-sm, $grid-breakpoints-md, $grid-breakpoints-lg, $grid-breakpoints-xl) {
    // Provide basic `.col-{bp}` classes for equal-width flexbox columns
    @if $enable-flex {
      .col-#{$breakpoint} {
        position: relative;
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
        min-height: 1px;
        padding-right: ($grid-gutter-width / 2);
        padding-left:  ($grid-gutter-width / 2);
      }
    }

    @for $i from 1 through $columns {
      .col-#{$breakpoint}-#{$i} {
        @include make-col($i, $columns, $gutter);
      }
    }

    @each $modifier in (pull, push) {
      @for $i from 0 through $columns {
        .#{$modifier}-#{$breakpoint}-#{$i} {
          @include make-col-modifier($modifier, $i, $columns)
        }
      }
    }

    // `$columns - 1` because offsetting by the width of an entire row isn't possible
    @for $i from 0 through ($columns - 1) {
      @if $breakpoint-counter != 1 or $i != 0 { // Avoid emitting useless .offset-xs-0
        .offset-#{$breakpoint}-#{$i} {
          @include make-col-modifier(offset, $i, $columns)
        }
      }
    }
  }

  // xl
  $breakpoint: xl;
  $breakpoint-counter: ($breakpoint-counter + 1);

  @for $i from 1 through $columns {
    .col-#{$breakpoint}-#{$i} {
      @extend %grid-column;
    }
  }

  @include media-breakpoint-up(xl, $grid-breakpoints-xs, $grid-breakpoints-sm, $grid-breakpoints-md, $grid-breakpoints-lg, $grid-breakpoints-xl) {
    // Provide basic `.col-{bp}` classes for equal-width flexbox columns
    @if $enable-flex {
      .col-#{$breakpoint} {
        position: relative;
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
        min-height: 1px;
        padding-right: ($grid-gutter-width / 2);
        padding-left:  ($grid-gutter-width / 2);
      }
    }

    @for $i from 1 through $columns {
      .col-#{$breakpoint}-#{$i} {
        @include make-col($i, $columns, $gutter);
      }
    }

    @each $modifier in (pull, push) {
      @for $i from 0 through $columns {
        .#{$modifier}-#{$breakpoint}-#{$i} {
          @include make-col-modifier($modifier, $i, $columns)
        }
      }
    }

    // `$columns - 1` because offsetting by the width of an entire row isn't possible
    @for $i from 0 through ($columns - 1) {
      @if $breakpoint-counter != 1 or $i != 0 { // Avoid emitting useless .offset-xs-0
        .offset-#{$breakpoint}-#{$i} {
          @include make-col-modifier(offset, $i, $columns)
        }
      }
    }
  }


}
